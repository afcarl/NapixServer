==================
Authentication API
==================

Objects
=======

Users
-----

An User is the unit of authentication.
It holds a set of permissions, and a list of children and clones

They have a set of properties:

name
    The name of the user. It is unique in the whole Napix Central server.
password
    The key used by the user to connect to the API.
delegate
    Can create and manage children.
master
    Can create and manage its clones.
parent
    the user who created this user
referent
    The user of which this user is a clone


Clones
......

The user is either a referent or a clone.
The referent is the original user created.
It cannot change its name.
Its deletion triggers the deletion of all its clones and children.

The clones are copies a an user with different properties (password, delegation rights, etc)
but the same children and clones as its referent.

When a clone is deleted, its referent remains.

The referent of an user can not be changed.

Children
........

The users are related together by a child-parent link.

Parent have authority over their children.
When a parent is removed, its children are also deleted,
when a child is removed, its parent remains.

A child is always linked to a referent.

The parent of an user can not be changed.

User who doesn't have a parent are the super-admins.

Perm
----

The permissions are the unit of the authorization.
They are composed of a path, an host and a set of methods.

The method is a list of authorized HTTP methods: GET, POST, PUT, etc.

The path and the host can be:

* ``*`` meaning that there is no limit on this parameter
* The litteral expected string. In order to authorize request on ``ns.napix.nx``, the host will be ``ns.napix.nx``
* A pattern of tokens and litterals separated by ``.`` for the host and ``/`` for the path
  The tokens are ``*`` meaning any value inside this token and ``**`` meaning any value for this token and the following.
  The ``**`` are always either at the start or the end of the rule.
  It is possible to get a litteral and a token in the same group.

Examples:

+------------------+-----------------+----------------+---------------------+---------------+
|   Host names     |              Rules                                                     |
+                  +-----------------+----------------+---------------------+---------------+
|                  |  \*.napix.nx    | client.\*\*    | client.napix.\*     | \*\*.napix.nx |
+==================+=================+================+=====================+===============+
| napix.nx         |                 |                |                     |               |
+------------------+-----------------+----------------+---------------------+---------------+
| ns.napix.nx      |       X         |                |                     |     X         |
+------------------+-----------------+----------------+---------------------+---------------+
| ns.dns.napix.nx  |                 |                |                     |     X         |
+------------------+-----------------+----------------+---------------------+---------------+
| client.napix.nx  |       X         |       X        |    X                |     X         |
+------------------+-----------------+----------------+---------------------+---------------+
| client.napix.org |                 |       X        |    X                |               |
+------------------+-----------------+----------------+---------------------+---------------+


Services
========

The Napix Central object may be accessed over an API.

This API does not use the Napix centrald services.
Instead it authentificates its user with its own base.
The permission on the objects depends on the connectted user and its position to its target.

Users services
--------------

+--------------------------+-------------------------------------------+---------------------------------------+-------------------------------+
|  Request                 | Action                                    | Authorized to                         | Notes                         |
+==========================+===========================================+=======================================+===============================+
| GET /auth/               | Retrieve all the login of the users       | Every user, but the listing is        |                               |
|                          |                                           | limited to the descendants            |                               |
+--------------------------+-------------------------------------------+---------------------------------------+-------------------------------+
| POST /auth/              | Creates a referent                        | Users that have the ``delegate``      | The parent is either a        |
|                          |                                           | privilege                             | descendant of the connected   |
|                          |                                           |                                       | user or himself by default    |
+--------------------------+-------------------------------------------+---------------------------------------+-------------------------------+
| GET /auth/login          | Retrieve the info about the user `login`  | The ancestor of the target or the     |                               |
|                          |                                           | target itself.                        |                               |
+--------------------------+-------------------------------------------+---------------------------------------+-------------------------------+
| PUT /auth/login          | Modifies the info about the user `login`  | The user himself or an ancestor       | The user cannot modify his    | 
|                          |                                           | who has the ``delegate`` privilege    | own ``master`` and            |
|                          |                                           |                                       | ``delegate`` rights.          |
|                          |                                           |                                       | The name cannot be changed    |
+--------------------------+-------------------------------------------+---------------------------------------+-------------------------------+
| DELETE /auth/login       | Remove the user `login` and all its       | An ancestor who has the ``delegate``  |                               |
|                          | descendants and clones                    | privilege                             |                               |
+--------------------------+-------------------------------------------+---------------------------------------+-------------------------------+

Permission services
-------------------

In order to create or modify a permission,
the user making the request must already own the permission or a superset of the permission.

For example, if an user have the permission to make a request on ``/collection/*`` on ``*.napix.nx``,
he can delegate this same permission or a subset like ``/collection/*`` on ``n1.napix.nx``.
But he cannot delegate ``/other_collection/*`` on ``*.napix.nx``.

Thus an user cannot modify his own permissions, he cannot add himself more permission than he already have,
and it prevents him from forbidding himself to do something he is allowed to do.

If an user remove or modify a permission of an user, the action is also applied on all his descendants.


+-------------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
|  Request                            | Action                                   | Authorized to                         | Notes                         |
+=====================================+==========================================+=======================================+===============================+
| GET /auth/login/permissions/        | List the permissions of the target       | The user and its ancestors            |                               |
+-------------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| POST /auth/login/permissions/       | Create a new permission                  | Users that have the ``delegate``      | The user must own the         |
|                                     |                                          | privilege. The user can not make this | permission he wants to        |
|                                     |                                          | request on himself.                   | attribute                     |
+-------------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| GET /auth/login/permissions/key     | Get the details on the permission        | Same as GET permissions/              |                               |
+-------------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| PUT /auth/login/permissions/key     | Modifies the info about the user `login` | Same as POST                          | If the permission removed is  |
|                                     |                                          |                                       | not a subset of the new       |
|                                     |                                          |                                       | permission, the modification  |
|                                     |                                          |                                       | is cascaded on the children.  |
+-------------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| DELETE /auth/login/permissions/key  | Remove a permission from the user's set  | An ancestor who has the ``delegate``  | The permission is removed to  |
|                                     |                                          |                                       | the children                  |
+-------------------------------------+------------------------------------------+---------------------------------------+-------------------------------+

Clones services
---------------

The clones services exposes the ``master``, ``delegate``, ``password`` and ``name`` properties.
The referent is always the user on which the request is made.

+----------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
|  Request                         | Action                                   | Authorized to                         | Notes                         |
+==================================+==========================================+=======================================+===============================+
| GET /auth/login/aliases/         | List the clones of the target            | The user and its ancestors            |                               |
+----------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| POST /auth/login/aliases/        | Create a new permission                  | Ancestor or clones who  have the      | The login is unique for all   |
|                                  |                                          | ``master`` privilege                  | the users and clones. The user|
|                                  |                                          |                                       | can set ``delegate`` to true  |
|                                  |                                          |                                       | only if he has this right     |
+----------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| GET /auth/login/aliases/alias    | Get the details on the clone             | Same as GET /                         |                               |
+----------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| PUT /auth/login/aliases/alias    | Modifies the info about the user `login` | Same as POST                          |                               |
+----------------------------------+------------------------------------------+---------------------------------------+-------------------------------+
| DELETE /auth/login/aliases/alias | Remove a clone                           | Same as POST                          |                               |
+----------------------------------+------------------------------------------+---------------------------------------+-------------------------------+

